syntax = "proto3";

package mock.cluster.service;

import "google/protobuf/wrappers.proto";
import "google/protobuf/field_mask.proto";

// A set of methods for managing PostgreSQL Cluster resources.
service ClusterService {
  // Retrieves a list of hosts for the specified cluster.
  rpc ListHosts (ListClusterHostsRequest) returns (ListClusterHostsResponse) {
    option (google.api.http) = { get: "/mdb/postgresql/v1/clusters/{cluster_id}/hosts" };
  }

  // // Retrieves a list of hosts for the specified PostgreSQL cluster at specified revision.
  // rpc ListHostsAtRevision (ListClusterHostsAtRevisionRequest) returns (ListClusterHostsResponse) {
  //   option (google.api.http) = { get: "/mdb/postgresql/v1/clusters/{cluster_id}/hosts/atRevision" };
  // }

  // Creates new hosts for a cluster.
  rpc AddHosts (AddClusterHostsRequest) returns (AddClusterHostsMetadata) {
    option (google.api.http) = { post: "/mdb/postgresql/v1/clusters/{cluster_id}/hosts:batchCreate" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "AddClusterHostsMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Deletes the specified hosts for a cluster.
  rpc DeleteHosts (DeleteClusterHostsRequest) returns (DeleteClusterHostsMetadata) {
    option (google.api.http) = { post: "/mdb/postgresql/v1/clusters/{cluster_id}/hosts:batchDelete" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteClusterHostsMetadata"
      response: "google.protobuf.Empty"
    };
    option (yandex.cloud.api.tools.method).lint_skip.http_verb = true;
  }

  // Updates the specified hosts.
  rpc UpdateHosts (UpdateClusterHostsRequest) returns (UpdateClusterHostsMetadata) {
    option (google.api.http) = { post: "/mdb/postgresql/v1/clusters/{cluster_id}/hosts:batchUpdate" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateClusterHostsMetadata"
      response: "google.protobuf.Empty"
    };
    option (yandex.cloud.api.tools.method).lint_skip.http_verb = true;
  }
}

message ListClusterHostsRequest {
  // ID of the PostgreSQL cluster.
  // To get the PostgreSQL cluster ID use a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // The maximum number of results per page to return. If the number of available
  // results is larger than [page_size], the service returns a [ListClusterHostsResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  int64 page_size = 2 [(value) = "<=1000"];

  // Page token.  To get the next page of results, set [page_token] to the [ListClusterHostsResponse.next_page_token]
  // returned by a previous list request.
  string page_token = 3 [(length) = "<=100"];
}

// message ListClusterHostsAtRevisionRequest {
//   // ID of the PostgreSQL cluster.
//   // To get the PostgreSQL cluster ID use a [ClusterService.List] request.
//   string cluster_id = 1 [(required) = true, (length) = "<=50"];

//   // The maximum number of results per page to return. If the number of available
//   // results is larger than [page_size], the service returns a [ListClusterHostsResponse.next_page_token]
//   // that can be used to get the next page of results in subsequent list requests.
//   int64 page_size = 2 [(value) = "0-1000"];

//   // Page token.  To get the next page of results, set [page_token] to the [ListClusterHostsResponse.next_page_token]
//   // returned by a previous list request.
//   string page_token = 3 [(length) = "<=100"];

//   // Cluster revision
//   int64 revision = 4 [(value) = ">0"];
// }

message ListClusterHostsResponse {
  // List of Host resources.
  repeated Host hosts = 1;

  // This token allows you to get the next page of results for list requests. If the number of results
  // is larger than [ListClusterHostsRequest.page_size], use the [next_page_token] as the value
  // for the [ListClusterHostsRequest.page_token] query parameter in the next list request.
  // Each subsequent list request will have its own [next_page_token] to continue paging through the results.
  string next_page_token = 2;
}

message AddClusterHostsRequest {
  // ID of the PostgreSQL cluster to add hosts to.
  // To get the PostgreSQL cluster ID, use a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Configurations for PostgreSQL hosts that should be added to the cluster.
  repeated HostSpec host_specs = 2 [(size) = "1"];
}

message AddClusterHostsMetadata {
  // ID of the PostgreSQL cluster to which the hosts are being added.
  string cluster_id = 1;

  // Names of hosts that are being added to the cluster.
  repeated string host_names = 2;
}

message DeleteClusterHostsRequest {
  // ID of the PostgreSQL cluster to remove hosts from.
  // To get the PostgreSQL cluster ID, use a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Names of hosts to delete.
  repeated string host_names = 2 [(size) = "1", (length) = "<=253"];
}

message DeleteClusterHostsMetadata {
  // ID of the PostgreSQL cluster to remove hosts from.
  string cluster_id = 1;

  // Names of hosts that are being deleted.
  repeated string host_names = 2;
}

message UpdateClusterHostsRequest {
  // ID of the PostgreSQL cluster to update hosts in.
  // To get the PostgreSQL cluster ID, use a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // New configurations to apply to hosts.
  repeated UpdateHostSpec update_host_specs = 2 [(size) = "1"];
}

message UpdateClusterHostsMetadata {
  // ID of the PostgreSQL cluster to update hosts in.
  string cluster_id = 1;

  // Names of hosts that are being updated.
  repeated string host_names = 2;
}

message UpdateHostSpec {
  // Name of the host to update.
  // To get the PostgreSQL host name, use a [ClusterService.ListHosts] request.
  string host_name = 1 [(required) = true];

  // [Host.name] of the host to be used as the replication source (for cascading replication).
  // To get the PostgreSQL host name, use a [ClusterService.ListHosts] request.
  string replication_source = 2;

  // The host with the highest priority is the synchronous replica. All others are asynchronous.
  // The synchronous replica replaces the master when needed.
  //
  // When a replica becomes the master, its priority is ignored.
  google.protobuf.Int64Value priority = 3 [(value) = "0-100"];

  // Configuration of a PostgreSQL server for the host.
  // ConfigHostSpec config_spec = 4;

  // Field mask that specifies which fields of the PostgreSQL host should be updated.
  google.protobuf.FieldMask update_mask = 5;

  // Whether the host should get a public IP address on creation.
  bool assign_public_ip = 6;
}

message HostSpec {
  // ID of the availability zone where the host resides.
  // To get a list of available zones, use the [yandex.cloud.compute.v1.ZoneService.List] request.
  string zone_id = 1 [(length) = "<=50"];

  // ID of the subnet that the host should belong to. This subnet should be a part
  // of the network that the cluster belongs to.
  // The ID of the network is set in the field [Cluster.network_id].
  string subnet_id = 2 [(length) = "<=50"];

  // Whether the host should get a public IP address on creation.
  //
  // Possible values:
  // * false - don't assign a public IP to the host.
  // * true - the host should have a public IP address.
  bool assign_public_ip = 3;

  // [Host.name] of the host to be used as the replication source (for cascading replication).
  string replication_source = 4;

  // Priority of the host as a replica. A higher value corresponds to higher priority.
  //
  // The host with the highest priority is the synchronous replica. All others are asynchronous.
  // The synchronous replica replaces the master when needed.
  //
  // When a replica becomes the master, its priority is ignored.
  google.protobuf.Int64Value priority = 5 [(value) = "0-100"];

  // Configuration of a PostgreSQL server for the host.
  // ConfigHostSpec config_spec = 6;
}


//
// MODELS
//


message Host {
  enum Role {
    option (cloud.api.tools.enumeration).lint_skip.unspecified_value = true;

    // Role of the host in the cluster is unknown.
    ROLE_UNKNOWN = 0;

    // Host is the master PostgreSQL server in the cluster.
    MASTER = 1;

    // Host is a replica (standby) PostgreSQL server in the cluster.
    REPLICA = 2;
  }

  enum ReplicaType {
    option (cloud.api.tools.enumeration).lint_skip.unspecified_value = true;
    REPLICA_TYPE_UNKNOWN = 0; // Replica type is unknown (we have no data) or it's master
    ASYNC = 1;
    SYNC = 2;
    QUORUM = 3;
  }

  enum Health {
    option (cloud.api.tools.enumeration).lint_skip.unspecified_value = true;

    // Health of the host is unknown.
    HEALTH_UNKNOWN = 0;

    // The host is performing all its functions normally.
    ALIVE = 1;

    // The host is inoperable, and cannot perform any of its essential functions.
    DEAD = 2;

    // The host is degraded, and can perform only some of its essential functions.
    DEGRADED = 3;

    // The host is alive, but in read-only mode.
    READONLY = 4;
  }

  message CPUMetric {
    int64 timestamp = 1;
    double used = 2;
  }

  message MemoryMetric {
    int64 timestamp = 1;
    int64 used = 2;
    int64 total = 3;
  }

  message DiskMetric {
    int64 timestamp = 1;
    int64 used = 2;
    int64 total = 3;
  }

  message SystemMetrics {
    CPUMetric cpu = 1;
    MemoryMetric memory = 2;
    DiskMetric disk = 3;
  }

  // Name of the PostgreSQL host. The host name is assigned by MDB at creation time, and cannot be changed.
  // 1-63 characters long.
  //
  // The name is unique across all existing MDB hosts in Yandex.Cloud, as it defines the FQDN of the host.
  string name = 1;

  // ID of the PostgreSQL host. The ID is assigned by MDB at creation time.
  string cluster_id = 2;

  // ID of the availability zone where the PostgreSQL host resides.
  string zone_id = 3;

  // Resources allocated to the PostgreSQL host.
  Resources resources = 4;

  // Role of the host in the cluster.
  Role role = 5;

  // Status code of the aggregated health of the host.
  Health health = 6;

  // Services provided by the host.
  repeated Service services = 7;

  // ID of the subnet that the host belongs to.
  string subnet_id = 8;

  // Name of the host to be used as the replication source for cascading replication.
  string replication_source = 9;

  // Priority of the host as a replica. Higher value means higher priority.
  //
  // The host with the highest priority is the synchronous replica. All others are asynchronous.
  // The synchronous replica replaces the master when needed.
  //
  // When a replica becomes the master, its priority is ignored.
  google.protobuf.Int64Value priority = 10;

  // Configuration of a PostgreSQL server for the host.
  // HostConfig config = 11;

  ReplicaType replica_type = 12;

  bool assign_public_ip = 13;

  string walle_link = 14;

  string state_reason = 15;

  SystemMetrics system = 16;
}

message Service {
enum Type {
  TYPE_UNSPECIFIED = 0;

  // The host is a PostgreSQL server.
  POSTGRESQL = 1;

  // The host is a PgBouncer server.
  POOLER = 2;
}

enum Health {
 option (cloud.api.tools.enumeration).lint_skip.unspecified_value = true;

 // Health of the server is unknown.
  HEALTH_UNKNOWN = 0;

  // The server is working normally.
  ALIVE = 1;

  // The server is dead or unresponsive.
  DEAD = 2;

  // The server is in read-only mode.
  READONLY = 3;
}

  // Type of the service provided by the host.
  Type type = 1;

  // Status code of server availability.
  Health health = 2;
}

message Resources {
  // ID of the preset for computational resources available to a host (CPU, memory etc.).
  // All available presets are listed in the [documentation](/docs/managed-postgresql/concepts/instance-types).
  string resource_preset_id = 1;

  // Volume of the storage available to a host, in bytes.
  int64 disk_size = 2;

  // Type of the storage environment for the host.
  // Possible values:
  // * network-hdd - network HDD drive,
  // * network-nvme - network SSD drive,
  // * local-nvme - local SSD storage.
  string disk_type_id = 3;
}